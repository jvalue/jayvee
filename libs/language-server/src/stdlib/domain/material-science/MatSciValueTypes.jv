// SPDX-FileCopyrightText: 2024 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// DOI Format has been constrained by a standard pattern, eg: 10.1007/xxxx
constraint DOIFormat on text: value matches /\b10\.\d{4}\/[^\s]+\b/;
publish valuetype DOI oftype text {
	constraints: [
		DOIFormat
	];
}

// DateFormat as YYYY-MM-DD
constraint DateFormatYYYYMMDDRegex on text: value matches /\d{4}-\d{2}-\d{2}/;
publish valuetype DateYYYYMMDD oftype text {
	constraints: [
		DateFormatYYYYMMDDRegex
	];
}

// Either Mega- or Giga-Pascal
constraint MPaOrGPaConstraint on text: value matches /\(10\^[6|9]\.0\) \* Pascal\^\(1\.0\)/;
publish valuetype MegaOrGigaPascal oftype text {
	constraints: [
		MPaOrGPaConstraint
	];
}

// Either Micro-/Nano- or Pico-Meters
constraint MiMNMorPMConstraint on text: value matches /\(10\^-[3|6|9]\.0\) \* Meter\^\(1\.0\)/;
publish valuetype MicroOrNanoOrPicoMeters oftype text {
	constraints: [
		MiMNMorPMConstraint
	];
}

// Constraining the Unit column to be of a specific format like "Second^(1.0)", "Ampere^(1.0)" or "Candela^(1.0)".
constraint SiUnitRegex on text: value matches /\b((Second|Metre|Kilogram|Ampere|Kelvin|Mole|Candela)+\^\(\d+(\.\d+)?\|\-\d+(\.\d+)?\)+\s)*\b/;
publish valuetype SiUnit oftype text {
	constraints: [
		SiUnitRegex
	];
}

// Constrains Temperature units to be Kelvin^(x).
constraint TemperatureUnitKelvinConstraint on text: value matches /\b(Kelvin\^\(\d+(\.\d+)?\|\-\d+(\.\d+)?\)+\s)*\b/;
publish valuetype TemperatureUnitKelvin oftype text {
	constraints: [
		TemperatureUnitKelvinConstraint
	];
}
