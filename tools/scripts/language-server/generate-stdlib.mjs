// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only
//@ts-check

import { existsSync, mkdirSync, readFileSync, readdirSync, writeFileSync } from "fs";
import { getSourcePath } from "../shared-util.mjs";
import { join } from "path";

// Executing this script: node path/to/generate-stdlib.mjs
const projectName = 'language-server';
const sourcePath = getSourcePath(projectName);
if (sourcePath === undefined) {
    throw Error(`Project ${projectName} does not exist!`);
}
process.chdir(sourcePath);
console.log('Generating stdlib...');

const stdLibInputPath = 'stdlib';
const outputDirPath = 'lib/builtin-library/generated';
const outputFilePath = `${outputDirPath}/stdlib.ts`;

console.log(`Reading jv files from directory ${sourcePath}/${stdLibInputPath}`)
const libsArray = readLibrariesFromDirectory([stdLibInputPath]);
const libsRecord = {};
libsArray.forEach(lib => {
    libsRecord[lib.name] = lib.content;
})

const stdlibOutput = `/******************************************************************************
* This file was generated by tools/scripts/language-server/generate-stdlib.mjs.
* DO NOT EDIT MANUALLY!
******************************************************************************/

` + 'export const StdLib = ' + JSON.stringify(libsRecord, null, 2) + ';\n';

console.log(`Writing standard lib to file ${sourcePath}/${outputFilePath}`)
if (!existsSync(outputDirPath)) {
    mkdirSync(outputDirPath, {recursive: true});
}
writeFileSync(outputFilePath, stdlibOutput, { encoding: 'utf8', flag: 'w'});

function readLibrariesFromDirectory(pathParts) {
    const path = join(...pathParts);
    const libs = [];

    readdirSync(path, { withFileTypes: true })
        .filter((file) => !file.isDirectory())
        .filter((file) => file.name.endsWith('.jv'))
        .forEach((file) => {
        const fileName = file.name;
        const filePath = `${path}/${fileName}`;
        const fileContent = readFileSync(filePath);
        libs.push({
            name: `builtin:///${filePath}`,
            content: fileContent.toString(),
        });
    });

    readdirSync(path, { withFileTypes: true })
        .filter((file) => file.isDirectory())
        .forEach((directory) => {
            const libsOfSubdir = readLibrariesFromDirectory([path, directory.name]);
            libs.push(...libsOfSubdir);
        });
    
    return libs;
}